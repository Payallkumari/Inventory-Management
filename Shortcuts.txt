// Testing Routes for stage 1

Create a New Item  POST     http://localhost:3000/item                 { "name": "Laptop", "quantity": 10, "price": 1200.50 }
Get All Items      GET      http://localhost:3000/item                 None
Update an Item     PUT      http://localhost:3000/item/{id}            { "name": "Gaming Laptop",  "quantity": 15,  "price": 1500.75 }
Delete an Item     DELETE   http://localhost:3000/item/{id}            None
Stock In an Item   POST     http://localhost:3000/item/{id}/stock-in   { "quantity": 5}
Sell an Item       POST     http://localhost:3000/item/{id}/sell       { "quantity": 3}
Remove Item        POST     http://localhost:3000/item/{id}/remove     { "quantity": 2}



// Improved and meaningfull REQUEST API ENDPOINTS  Stage 2

PRODUCT ROUTES

Create Product	    POST	http://localhost:3000/api/products	    { "name": "Milk", "price": 2.5 }
Get All Products	GET	    http://localhost:3000/api/products	    None
Update Product	    PUT	    http://localhost:3000/api/products/1	{ "name": "Milk 2L", "price": 3.0 }

STORE ROUTES

Get All Stores	            GET	    http://localhost:3000/api/stores	                     None
Get Stock at Store	        GET	    http://localhost:3000/api/stores/1/stock	             None
Stock-In Product to Store	POST	http://localhost:3000/api/stores/1/products/1/stock-in	{ "quantity": 50 }
Sell Product from Store	    POST	http://localhost:3000/api/stores/1/products/1/sell	    { "quantity": 5 }
Remove Stock from Store	    POST	http://localhost:3000/api/stores/1/products/1/remove	{ "quantity": 2 }

FITERING 

Get Store Inventory by Date	     GET	http://localhost:3000/api/stores/1/inventory?date_from=2024-03-01&date_to=2024-03-31	None
Get Top Selling Products	     GET	http://localhost:3000/api/stores/1/sales?top=5	                                        None
Get Low Stock Alerts	         GET	http://localhost:3000/api/stores/1/low-stock?threshold=3	                            None
Get Total Sales (Date Filtered)	 GET	http://localhost:3000/api/stores/1/total-sales?date_from=2024-03-01&date_to=2024-03-31	None


Horizontally Scalable command
pm2 start e:\workspace\inventory-management\index.js -i max
pm2 list
pm2 logs
pm2 save
pm2 startup


Starting
pm2 start index.js -i max
node -p "require('os').cpus().length"
Example Output:  8


So, PM2 will run:
pm2 start index.js -i 8    or simply: pm2 start index.js -i max

Final Steps:
pm2 delete all
pm2 start index.js -i max
pm2 save

Quick Monitoring Commands for PM2:
pm2 list            # Show running processes
pm2 monit           # Real-time monitoring (cpu, memory)
pm2 logs            # Check app logs
pm2 restart all     # Restart all apps
pm2 delete all      # Delete all apps

TRoubleshootings

1. how to close all the running servers on all core.
netstat -ano | findstr :3000
taskkill /PID 12345 /F    ---- put he id in PID

results would be
C:\Users\PAYAL>taskkill /PID 16884 /F
SUCCESS: The process with PID 16884 has been terminated.

2. Restarting Postgres
Open Services (Win + R, type services.msc, press Enter).
Look for PostgreSQL (e.g., PostgreSQL 14).
If it's Stopped, right-click â†’ Start.

